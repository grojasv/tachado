---
import Layout from '../layouts/Layout.astro';
import DevFooter from '../components/DevFooter.astro';
---

<Layout title="Tachado - Todo App">
	<div class="max-w-md mx-auto">
		<!-- Header -->
		<header class="text-center mb-8">
			<h1 class="text-3xl font-bold text-gray-800 mb-2">Tachado</h1>
			<p class="text-gray-600">Simple, smooth todo lists</p>
		</header>

		<!-- Todo Input -->
		<div class="bg-white/80 backdrop-blur-sm rounded-lg shadow-lg p-6 mb-6">
			<div class="flex items-center space-x-3">
				<input 
					type="text" 
					placeholder="Add a new todo..." 
					class="flex-1 px-4 py-3 border border-gray-200 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
					id="todoInput"
				>
				<button 
					class="px-6 py-3 bg-blue-500 text-white rounded-lg hover:bg-blue-600 focus:outline-none focus:ring-2 focus:ring-blue-500 transition-colors"
					id="addTodoBtn"
				>
					Add
				</button>
			</div>
		</div>

		<!-- Active Todos -->
		<div class="bg-white/80 backdrop-blur-sm rounded-lg shadow-lg p-6 mb-6">
			<h2 class="text-lg font-semibold text-gray-800 mb-4">Active Todos</h2>
			<div id="activeTodos" class="space-y-3">
				<!-- Todo items will be added here dynamically -->
			</div>
		</div>

		<!-- Completed Todos -->
		<div class="bg-white/60 backdrop-blur-sm rounded-lg shadow-lg p-6">
			<h2 class="text-lg font-semibold text-gray-600 mb-4">Completed</h2>
			<div id="completedTodos" class="space-y-3">
				<!-- Completed items will be moved here -->
			</div>
		</div>
	</div>

	<!-- Development Footer -->
	<DevFooter />
</Layout>

<script>
	// Phase 3: Drag and Drop Implementation
	// This script handles todo creation, completion, smooth animations, and drag-and-drop reordering
	
	// SortableJS will be loaded from CDN

	// Get DOM elements
	const todoInput = document.getElementById('todoInput') as HTMLInputElement;
	const addTodoBtn = document.getElementById('addTodoBtn') as HTMLButtonElement;
	const activeTodos = document.getElementById('activeTodos') as HTMLDivElement;
	const completedTodos = document.getElementById('completedTodos') as HTMLDivElement;

	// Todo data structure
	let todos: TodoItem[] = [];

	// Todo item interface
	interface TodoItem {
		id: string;
		text: string;
		completed: boolean;
		createdAt: Date;
		order: number;
	}

	// Generate unique ID for todo items
	function generateId(): string {
		return Date.now().toString(36) + Math.random().toString(36).substr(2);
	}

	// Create a new todo item element
	function createTodoElement(todo: TodoItem): HTMLElement {
		const todoElement = document.createElement('div');
		todoElement.className = 'todo-item bg-white/60 backdrop-blur-sm rounded-lg p-4 shadow-sm border border-gray-100 transition-all duration-300 ease-in-out transform hover:scale-[1.01] hover:shadow-md';
		todoElement.dataset.todoId = todo.id;

		// Create checkbox
		const checkbox = document.createElement('input');
		checkbox.type = 'checkbox';
		checkbox.className = 'w-6 h-6 text-blue-500 border-gray-300 rounded focus:ring-blue-500 mr-4 flex-shrink-0';
		checkbox.checked = todo.completed;
		checkbox.addEventListener('change', () => toggleTodo(todo.id));

		// Create text span with smooth strike-through animation
		const textSpan = document.createElement('span');
		textSpan.className = `todo-text transition-all duration-300 ease-in-out ${todo.completed ? 'line-through text-gray-500' : 'text-gray-800'}`;
		textSpan.textContent = todo.text;

					// Create container for checkbox and text
		const contentContainer = document.createElement('div');
		contentContainer.className = 'flex items-center w-full';
		contentContainer.appendChild(checkbox);
		contentContainer.appendChild(textSpan);
		
		// Add subtle drag indicator
		const dragIndicator = document.createElement('div');
		dragIndicator.className = 'ml-auto opacity-30 hover:opacity-60 transition-opacity duration-200';
		dragIndicator.innerHTML = '⋮⋮';
		dragIndicator.style.fontSize = '0.8rem';
		dragIndicator.style.fontWeight = 'bold';
		dragIndicator.style.color = '#6B7280';
		contentContainer.appendChild(dragIndicator);
		
		// Assemble todo item
		todoElement.appendChild(contentContainer);

		return todoElement;
	}

	// Add a new todo
	function addTodo(text: string) {
		if (!text.trim()) return;

		const newTodo: TodoItem = {
			id: generateId(),
			text: text.trim(),
			completed: false,
			createdAt: new Date(),
			order: todos.length
		};

		todos.push(newTodo);
		
		// Create and add todo element with smooth entrance animation
		const todoElement = createTodoElement(newTodo);
		todoElement.style.opacity = '0';
		todoElement.style.transform = 'translateY(-10px)';
		
		activeTodos.appendChild(todoElement);
		
		// Trigger entrance animation
		requestAnimationFrame(() => {
			todoElement.style.transition = 'opacity 0.3s ease-out, transform 0.3s ease-out';
			todoElement.style.opacity = '1';
			todoElement.style.transform = 'translateY(0)';
		});

		// Clear input
		todoInput.value = '';
		
		// Save to localStorage
		saveTodos();
	}

	// Toggle todo completion with smooth animations
	function toggleTodo(todoId: string) {
		const todo = todos.find(t => t.id === todoId);
		if (!todo) return;

		todo.completed = !todo.completed;
		
		// Find the todo element
		const todoElement = document.querySelector(`[data-todo-id="${todoId}"]`) as HTMLElement;
		if (!todoElement) return;

		// Get the text span for strike-through animation
		const textSpan = todoElement.querySelector('.todo-text') as HTMLElement;
		const checkbox = todoElement.querySelector('input[type="checkbox"]') as HTMLInputElement;

		if (todo.completed) {
			// Animate to completed section
			textSpan.style.transition = 'text-decoration 0.3s ease-out, color 0.3s ease-out';
			textSpan.classList.add('line-through', 'text-gray-500');
			
			// Move to completed section with smooth animation
			setTimeout(() => {
				completedTodos.appendChild(todoElement);
				todoElement.style.transition = 'all 0.4s ease-in-out';
				todoElement.style.transform = 'scale(0.98)';
				todoElement.style.opacity = '0.8';
				// Update order after moving
				updateTodoOrder();
			}, 150);
		} else {
			// Animate back to active section
			textSpan.style.transition = 'text-decoration 0.3s ease-out, color 0.3s ease-out';
			textSpan.classList.remove('line-through', 'text-gray-500');
			
			// Move back to active section with smooth animation
			setTimeout(() => {
				activeTodos.appendChild(todoElement);
				todoElement.style.transition = 'all 0.4s ease-in-out';
				todoElement.style.transform = 'scale(1)';
				todoElement.style.opacity = '1';
				// Update order after moving
				updateTodoOrder();
			}, 150);
		}

		// Save to localStorage
		saveTodos();
	}



	// Save todos to localStorage
	function saveTodos() {
		localStorage.setItem('tachado-todos', JSON.stringify(todos));
	}

	// Load todos from localStorage
	function loadTodos() {
		const saved = localStorage.getItem('tachado-todos');
		if (saved) {
			try {
				todos = JSON.parse(saved);
				// Restore date objects
				todos.forEach(todo => {
					todo.createdAt = new Date(todo.createdAt);
				});
			} catch (error) {
				console.error('Error loading todos:', error);
				todos = [];
			}
		}
	}

	// Render all todos
	function renderTodos() {
		// Clear containers
		activeTodos.innerHTML = '';
		completedTodos.innerHTML = '';

		// Sort todos by order
		const sortedTodos = [...todos].sort((a, b) => (a.order || 0) - (b.order || 0));

		// Render each todo in appropriate section
		sortedTodos.forEach(todo => {
			const todoElement = createTodoElement(todo);
			if (todo.completed) {
				completedTodos.appendChild(todoElement);
			} else {
				activeTodos.appendChild(todoElement);
			}
		});
	}

	// Event listeners
	addTodoBtn.addEventListener('click', () => addTodo(todoInput.value));
	
	todoInput.addEventListener('keypress', (e) => {
		if (e.key === 'Enter') {
			addTodo(todoInput.value);
		}
	});

	// Initialize drag-and-drop functionality
	function initializeSortable() {
		// Initialize SortableJS for active todos
		new Sortable(activeTodos, {
			group: 'todos',
			animation: 300,
			ghostClass: 'sortable-ghost',
			chosenClass: 'sortable-chosen',
			dragClass: 'sortable-drag',
			delay: 150, // Prevent accidental drags
			delayOnTouchOnly: true, // Only delay on touch devices
			touchStartThreshold: 5, // Minimum distance to start drag
			onStart: function(evt) {
				// Add haptic feedback for mobile devices
				if ('vibrate' in navigator) {
					navigator.vibrate(50);
				}
				evt.item.style.opacity = '0.8';
				evt.item.style.transform = 'rotate(1deg)';
			},
			onEnd: function(evt) {
				evt.item.style.opacity = '1';
				evt.item.style.transform = 'rotate(0deg)';
				
				// Update todo order in data
				updateTodoOrder();
			}
		});

		// Initialize SortableJS for completed todos
		new Sortable(completedTodos, {
			group: 'todos',
			animation: 300,
			ghostClass: 'sortable-ghost',
			chosenClass: 'sortable-chosen',
			dragClass: 'sortable-drag',
			delay: 150, // Prevent accidental drags
			delayOnTouchOnly: true, // Only delay on touch devices
			touchStartThreshold: 5, // Minimum distance to start drag
			onStart: function(evt) {
				// Add haptic feedback for mobile devices
				if ('vibrate' in navigator) {
					navigator.vibrate(50);
				}
				evt.item.style.opacity = '0.8';
				evt.item.style.transform = 'rotate(1deg)';
			},
			onEnd: function(evt) {
				evt.item.style.opacity = '1';
				evt.item.style.transform = 'rotate(0deg)';
				
				// Update todo order in data
				updateTodoOrder();
			}
		});
	}

	// Update todo order based on current DOM order
	function updateTodoOrder() {
		const activeTodoElements = activeTodos.querySelectorAll('.todo-item');
		const completedTodoElements = completedTodos.querySelectorAll('.todo-item');
		
		// Update active todos order
		activeTodoElements.forEach((element, index) => {
			const todoId = element.dataset.todoId;
			const todo = todos.find(t => t.id === todoId);
			if (todo) {
				todo.order = index;
			}
		});
		
		// Update completed todos order
		completedTodoElements.forEach((element, index) => {
			const todoId = element.dataset.todoId;
			const todo = todos.find(t => t.id === todoId);
			if (todo) {
				todo.order = activeTodoElements.length + index;
			}
		});
		
		// Save updated order
		saveTodos();
	}

	// Initialize app
	loadTodos();
	renderTodos();
	initializeSortable();
	
	// Add sample todos if no todos exist (for demonstration)
	if (todos.length === 0) {
		const sampleTodos = [
			"Welcome to Tachado! ✨",
			"Add your first todo above",
			"Click the checkbox to complete items",
			"Completed items move to the bottom",
			"Drag items to reorder them"
		];
		
		sampleTodos.forEach((text, index) => {
			setTimeout(() => {
				addTodo(text);
			}, index * 200); // Stagger the additions for a nice effect
		});
	}
	
	console.log('Tachado Phase 3: Drag and Drop functionality initialized');
</script>
