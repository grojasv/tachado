---
import Layout from '../layouts/Layout.astro';
import DevFooter from '../components/DevFooter.astro';
---

<Layout title="Tachado - Todo App">
	<div class="max-w-md mx-auto touch-pan-y">
		<!-- Header -->
		<header class="mb-3 md:mb-4">
			<div class="flex items-center justify-between">
				<div>
					<h1 class="title">Tachado</h1>
					<p class="text-gray-700 text-sm">Planea. Tacha. Respira. Otra vez 🔁</p>
				</div>
			</div>
		</header>

		<!-- Coach tips (one-time) -->
		<div id="coachTips" class="card p-3 mb-3 hidden">
			<div class="flex items-center justify-between">
				<div class="flex flex-wrap gap-2 text-sm text-gray-700">
					<span class="px-2 py-1 rounded-lg bg-blue-50 border border-blue-200">Arrastra “⋮⋮” para ordenar</span>
					<span class="px-2 py-1 rounded-lg bg-pink-50 border border-pink-200">Desliza un tachado para borrar</span>
				</div>
				<button id="coachClose" class="btn-ghost text-xs px-2 py-1">Cerrar</button>
			</div>
		</div>

		<!-- Install banners -->
		<div id="installBanner" class="fixed left-1/2 -translate-x-1/2 bottom-6 z-50 hidden">
			<div class="flex items-center gap-3 px-4 py-2 rounded-xl shadow-lg bg-white/90 border border-gray-200">
				<span class="text-sm text-gray-800">Instalar Tachado</span>
				<button id="installBtn" class="btn-primary text-sm px-3 py-1">Instalar</button>
				<button id="installDismiss" class="btn-ghost text-sm px-3 py-1">Más tarde</button>
			</div>
		</div>
		<div id="iosHint" class="fixed left-1/2 -translate-x-1/2 bottom-6 z-50 hidden">
			<div class="flex items-center gap-3 px-4 py-2 rounded-xl shadow-lg bg-white/90 border border-gray-200 text-sm text-gray-800">
				<span>En iPhone: toca Compartir → “Añadir a la pantalla de inicio”</span>
				<button id="iosDismiss" class="btn-ghost text-xs px-2 py-1">Cerrar</button>
			</div>
		</div>


		<!-- Live region for assistive tech announcements -->
		<div class="sr-only" aria-live="polite" id="a11yAnnouncer"></div>
		<!-- Toast -->
		<div id="toast" class="fixed left-1/2 -translate-x-1/2 bottom-24 z-50 px-3 py-2 rounded-xl bg-black/80 text-white text-xs opacity-0 pointer-events-none transition-opacity"></div>
		<!-- Undo snackbar -->
		<div id="undoBar" class="fixed left-1/2 -translate-x-1/2 bottom-6 z-50 hidden">
			<div class="flex items-center gap-3 px-4 py-2 rounded-xl shadow-lg bg-white/90 border border-gray-200">
				<span class="text-sm text-gray-800">Tachado eliminado</span>
				<button id="undoBtn" class="btn-ghost text-sm px-3 py-1">Deshacer</button>
			</div>
		</div>

		<!-- Todo Input -->
		<div class="card card-hover p-4 md:p-6 mb-6">
			<div class="flex items-center gap-3">
				<input 
					type="text" 
					placeholder="Añade una tarea..." 
					class="input"
					id="todoInput"
					autofocus
					enterkeyhint="done"
				>
				<button 
					class="btn-primary"
					id="addTodoBtn"
					aria-label="Añadir tarea"
				>
					+
				</button>
			</div>
		</div>

		<!-- Active Todos -->
		<div class="card card-hover p-4 md:p-6 mb-6">
			<h2 class="text-lg font-semibold text-gray-800 mb-4">Pendientes</h2>
			<div id="activeTodos" class="space-y-3 list-active-min">
				<div id="activeSkeleton" class="skeleton h-12"></div>
				<!-- Empty state -->
				<div id="emptyActive" class="hidden text-sm text-gray-500 text-center py-6">Escribe algo arriba y pulsa +</div>
			</div>
		</div>

		<!-- Completed Todos -->
		<div class="card card-hover p-4 md:p-6">
			<h2 class="text-lg font-semibold text-gray-700 mb-4">Tachados</h2>
			<div id="completedTodos" class="space-y-3 list-completed-min">
				<div id="completedSkeleton" class="skeleton h-10 w-1/2"></div>
				<!-- Empty state -->
				<div id="emptyCompleted" class="hidden text-sm text-gray-500 text-center py-6">Nada tachado (todavía) 😉</div>
			</div>
		</div>
	</div>

	<!-- Development Footer -->
	<DevFooter />
</Layout>

<script>
	import { getOrCreateSessionId, updateUrlWithSession, generateShareableUrl, isValidSessionId } from '../lib/sessionManager.js';
	import { scheduleSaveTodos, loadTodosFromFirebase, setupTodosRealtimeListener } from '../lib/firebaseDataManager.js';
	
	const todoInput = document.getElementById('todoInput') as HTMLInputElement;
	const addTodoBtn = document.getElementById('addTodoBtn') as HTMLButtonElement;
	const activeTodos = document.getElementById('activeTodos') as HTMLDivElement;
	const completedTodos = document.getElementById('completedTodos') as HTMLDivElement;
	const shareBtn = document.getElementById('shareBtn') as HTMLButtonElement;
	const sessionLabelFooter = document.getElementById('sessionLabelFooter') as HTMLSpanElement;
	const shareLinkInput = document.getElementById('shareLinkInput') as HTMLInputElement;
	const announcer = document.getElementById('a11yAnnouncer') as HTMLDivElement;
	const toast = document.getElementById('toast') as HTMLDivElement;
	const undoBar = document.getElementById('undoBar') as HTMLDivElement;
	const undoBtn = document.getElementById('undoBtn') as HTMLButtonElement;
	const coachTips = document.getElementById('coachTips') as HTMLDivElement;
	const coachClose = document.getElementById('coachClose') as HTMLButtonElement;
	const installBanner = document.getElementById('installBanner') as HTMLDivElement;
	const installBtn = document.getElementById('installBtn') as HTMLButtonElement;
	const installDismiss = document.getElementById('installDismiss') as HTMLButtonElement;
	const iosHint = document.getElementById('iosHint') as HTMLDivElement;
	const iosDismiss = document.getElementById('iosDismiss') as HTMLButtonElement;


	function showToast(message: string) { if (!toast) return; toast.textContent = message; toast.style.opacity = '1'; setTimeout(() => { toast.style.opacity = '0'; }, 1400); }
	function vibrate(ms: number) {
		try {
			if (window.matchMedia && window.matchMedia('(prefers-reduced-motion: reduce)').matches) return;
			if ('vibrate' in navigator) (navigator as any).vibrate(ms);
		} catch {}
	}
	function announce(msg: string) { if (announcer) announcer.textContent = msg; }

	let todos: TodoItem[] = [];
	let sessionId: string = '';
	let cleanupRealtime: Function | null = null;
	let lastDeleted: { todo: TodoItem; index: number } | null = null;
	let undoTimer: number | null = null;
	let deferredPrompt: any = null;
	let lastOrderAnnounceAt = 0;

	interface TodoItem { id: string; text: string; completed: boolean; createdAt: Date | number; order: number; }

	function setSession(id: string) { sessionId = id; updateUrlWithSession(sessionId); if (sessionLabelFooter) sessionLabelFooter.textContent = sessionId; }
	function ensureSessionId() { if (!isValidSessionId(sessionId)) { setSession(getOrCreateSessionId()); } }
	function updateShareLinkPreview() { if (shareLinkInput) shareLinkInput.value = generateShareableUrl(sessionId); }
	function generateId(): string { return Date.now().toString(36) + Math.random().toString(36).substr(2); }

	function createTodoElement(todo: TodoItem): HTMLElement {
		// Base card element
		const todoElement = document.createElement('div');
		todoElement.className = 'todo-item card p-4 animate-pop border border-white/40 relative';
		todoElement.dataset.todoId = todo.id;
		const checkbox = document.createElement('input');
		checkbox.type = 'checkbox';
		checkbox.className = 'checkbox mr-4 flex-shrink-0';
		checkbox.checked = !!todo.completed;
		checkbox.addEventListener('change', () => toggleTodo(todo.id));
		const textSpan = document.createElement('span');
		textSpan.className = `todo-text ${todo.completed ? 'line-through text-gray-500' : 'text-gray-800'}`;
		textSpan.textContent = todo.text;
		const contentContainer = document.createElement('div');
		contentContainer.className = 'flex items-center w-full';
		contentContainer.appendChild(checkbox);
		contentContainer.appendChild(textSpan);
		const dragIndicator = document.createElement('div');
		dragIndicator.className = 'ml-auto opacity-30 hover:opacity-60 transition-opacity duration-200';
		dragIndicator.innerHTML = '⋮⋮';
		dragIndicator.style.fontSize = '0.8rem';
		dragIndicator.style.fontWeight = 'bold';
		dragIndicator.style.color = '#6B7280';
		contentContainer.appendChild(dragIndicator);
		todoElement.appendChild(contentContainer);

		// Only completed items get swipe-to-delete wrapper + visuals
		if (todo.completed) {
			const wrapper = document.createElement('div');
			wrapper.className = 'swipe-container';
			const bg = document.createElement('div');
			bg.className = 'swipe-bg';
			const iconLeft = document.createElement('div'); iconLeft.className = 'swipe-icon left'; iconLeft.textContent = '🗑️';
			const iconRight = document.createElement('div'); iconRight.className = 'swipe-icon right'; iconRight.textContent = '🗑️';
			bg.appendChild(iconLeft); bg.appendChild(iconRight);
			wrapper.appendChild(bg);
			wrapper.appendChild(todoElement);
			attachSwipeToDelete(wrapper, todoElement, iconLeft, iconRight, todo.id);
			return wrapper;
		}

		// Active items: plain card
		return todoElement;
	}

	function attachSwipeToDelete(wrapper: HTMLElement, el: HTMLElement, iconLeft: HTMLElement, iconRight: HTMLElement, todoId: string) {
		let startX = 0; let swiping = false; let dx = 0;
		const THRESH = 64; // px threshold
		wrapper.addEventListener('touchstart', (e) => { startX = e.touches[0].clientX; swiping = true; dx = 0; });
		wrapper.addEventListener('touchmove', (e) => {
			if (!swiping) return;
			dx = e.touches[0].clientX - startX;
			el.style.transform = `translateX(${dx}px)`;
			const alpha = Math.min(1, Math.abs(dx) / 120);
			iconLeft.style.opacity = dx > 0 ? String(alpha) : '0';
			iconRight.style.opacity = dx < 0 ? String(alpha) : '0';
		});
		wrapper.addEventListener('touchend', () => {
			swiping = false;
			if (Math.abs(dx) > THRESH) {
				el.style.transition = 'transform .2s ease, opacity .2s ease';
				el.style.transform = `translateX(${dx > 0 ? 200 : -200}px)`;
				el.style.opacity = '0';
				setTimeout(() => { performDeleteCompleted(todoId); }, 180);
				vibrate(12); showToast('Item deleted');
			} else {
				el.style.transition = 'transform .2s ease, opacity .2s ease';
				el.style.transform = 'translateX(0)'; el.style.opacity = '1';
				iconLeft.style.opacity = '0'; iconRight.style.opacity = '0';
			}
		});
	}

	function performDeleteCompleted(todoId: string) {
		const tIndex = todos.findIndex(t => t.id === todoId);
		if (tIndex === -1) return;
		if (!todos[tIndex].completed) return; // only delete completed
		lastDeleted = { todo: todos[tIndex], index: tIndex };
		todos.splice(tIndex, 1);
		renderTodos();
		scheduleSaveTodos(sessionId, todos);
		showUndo();
	}

	function showUndo() {
		if (!undoBar) return;
		undoBar.classList.remove('hidden');
		if (undoTimer) { clearTimeout(undoTimer); }
		undoTimer = window.setTimeout(() => { hideUndo(); lastDeleted = null; }, 5000);
	}

	function hideUndo() { if (undoBar) undoBar.classList.add('hidden'); if (undoTimer) { clearTimeout(undoTimer); undoTimer = null; } }

	function addTodo(text: string) {
		if (!text.trim()) return;
		const newTodo: TodoItem = { id: generateId(), text: text.trim(), completed: false, createdAt: Date.now(), order: todos.length };
		todos.push(newTodo);
		renderTodos();
		scheduleSaveTodos(sessionId, todos);
		announce('Tarea añadida');
		vibrate(10);
		todoInput.value = '';
	}
	function toggleTodo(todoId: string) {
		const todo = todos.find(t => t.id === todoId);
		if (!todo) return;
		todo.completed = !todo.completed;
		renderTodos();
		scheduleSaveTodos(sessionId, todos);
		announce('Tarea actualizada');
		vibrate(8);
	}

	let sortableLoading = false;
	function ensureSortableLoaded(): Promise<void> {
		return new Promise((resolve) => {
			if ((window as any).Sortable) { resolve(); return; }
			if (sortableLoading) { const check = setInterval(() => { if ((window as any).Sortable) { clearInterval(check); resolve(); } }, 50); return; }
			sortableLoading = true;
			const s = document.createElement('script');
			s.src = 'https://cdn.jsdelivr.net/npm/sortablejs@1.15.0/Sortable.min.js';
			s.async = true;
			s.onload = () => { resolve(); };
			document.head.appendChild(s);
		});
	}

	async function initializeSortable() {
		await ensureSortableLoaded();
		const SortableLib = (window as any).Sortable;
		if (!SortableLib) return;
		new SortableLib(activeTodos, { group: 'todos', animation: 200, ghostClass: 'sortable-ghost', chosenClass: 'sortable-chosen', dragClass: 'sortable-drag', delay: 150, delayOnTouchOnly: true, touchStartThreshold: 5, onEnd: () => { updateTodoOrder(); vibrate(6); } });
		new SortableLib(completedTodos, { group: 'todos', animation: 200, ghostClass: 'sortable-ghost', chosenClass: 'sortable-chosen', dragClass: 'sortable-drag', delay: 150, delayOnTouchOnly: true, touchStartThreshold: 5, onEnd: () => { updateTodoOrder(); vibrate(6); } });
	}

	function renderTodos() {
		activeTodos.innerHTML = '';
		completedTodos.innerHTML = '';
		const sortedTodos = [...todos].sort((a, b) => (a.order || 0) - (b.order || 0));
		sortedTodos.forEach(todo => {
			const el = createTodoElement(todo);
			if (todo.completed) completedTodos.appendChild(el); else activeTodos.appendChild(el);
		});
		const sk1 = document.getElementById('activeSkeleton'); const sk2 = document.getElementById('completedSkeleton'); if (sk1) sk1.remove(); if (sk2) sk2.remove();
		// Empty states toggle
		const emptyActive = document.getElementById('emptyActive');
		const emptyCompleted = document.getElementById('emptyCompleted');
		if (emptyActive) emptyActive.classList.toggle('hidden', activeTodos.children.length > 0);
		if (emptyCompleted) emptyCompleted.classList.toggle('hidden', completedTodos.children.length > 0);
		initializeSortable();
	}
	function updateTodoOrder() {
		const activeEls = activeTodos.querySelectorAll('.todo-item');
		const completedEls = completedTodos.querySelectorAll('.todo-item');
		activeEls.forEach((el, idx) => { const t = todos.find(x => x.id === (el as HTMLElement).dataset.todoId); if (t) t.order = idx; });
		completedEls.forEach((el, idx) => { const t = todos.find(x => x.id === (el as HTMLElement).dataset.todoId); if (t) t.order = activeEls.length + idx; });
		scheduleSaveTodos(sessionId, todos);
		const now = Date.now();
		if (now - lastOrderAnnounceAt > 1500) { announce('Orden actualizado'); lastOrderAnnounceAt = now; }
	}
	function updateSessionLabel() { if (sessionLabelFooter) sessionLabelFooter.textContent = sessionId; }

	addTodoBtn.addEventListener('click', () => addTodo(todoInput.value));
	todoInput.addEventListener('keydown', (e) => { if ((e as KeyboardEvent).key === 'Enter') addTodo(todoInput.value); });
	todoInput.addEventListener('focus', () => { try { (e as any); } catch {} (todoInput as any).select?.(); });

	if (shareBtn) {
		shareBtn.addEventListener('click', async () => {
			try {
				ensureSessionId();
				const url = generateShareableUrl(sessionId);
				if (shareLinkInput) shareLinkInput.value = url;
				if (navigator.share) {
					await navigator.share({ title: 'Tachado', text: 'Comparte tu lista', url });
					showToast('Compartido');
				} else {
					await navigator.clipboard.writeText(url);
					showToast('Enlace copiado');
					const original = shareBtn.textContent;
					shareBtn.textContent = '✅ Copiado';
					shareBtn.disabled = true;
					shareBtn.classList.add('animate-pop');
					setTimeout(() => { shareBtn.textContent = original || '📋'; shareBtn.disabled = false; shareBtn.classList.remove('animate-pop'); }, 1200);
				}
			}
			catch { showToast('No se pudo copiar. Mantén pulsado para seleccionar el enlace.'); }
		});
	}

	// Coach tips once per device
	(function setupCoach() {
		try {
			const seen = localStorage.getItem('tachado_coach_seen');
			if (!seen && coachTips) {
				coachTips.classList.remove('hidden');
				coachClose?.addEventListener('click', () => { coachTips.classList.add('hidden'); localStorage.setItem('tachado_coach_seen', '1'); });
			}
		} catch {}
	})();

	// A2HS: Android beforeinstallprompt
	window.addEventListener('beforeinstallprompt', (e: any) => {
		e.preventDefault();
		deferredPrompt = e;
		try { if (!localStorage.getItem('tachado_install_dismissed')) installBanner?.classList.remove('hidden'); } catch {}
	});
	installBtn?.addEventListener('click', async () => {
		if (!deferredPrompt) return;
		installBanner?.classList.add('hidden');
		await deferredPrompt.prompt();
		deferredPrompt = null;
	});
	installDismiss?.addEventListener('click', () => { installBanner?.classList.add('hidden'); try { localStorage.setItem('tachado_install_dismissed', '1'); } catch {} });

	// iOS hint: show once if not standalone and Safari/iOS
	(function setupIosHint() {
		try {
			const isStandalone = (window.navigator as any).standalone === true;
			const ua = window.navigator.userAgent || '';
			const isIOS = /iPhone|iPad|iPod/i.test(ua);
			const isSafari = /Safari/i.test(ua) && !/CriOS|FxiOS|OPiOS|EdgiOS/i.test(ua);
			if (isIOS && isSafari && !isStandalone && !localStorage.getItem('tachado_ios_hint_dismissed')) {
				iosHint?.classList.remove('hidden');
				iosDismiss?.addEventListener('click', () => { iosHint?.classList.add('hidden'); localStorage.setItem('tachado_ios_hint_dismissed', '1'); });
			}
		} catch {}
	})();

	if (undoBtn) {
		undoBtn.addEventListener('click', () => {
			if (!lastDeleted) { hideUndo(); return; }
			const { todo, index } = lastDeleted;
			const insertIndex = Math.min(Math.max(index, 0), todos.length);
			todos.splice(insertIndex, 0, todo);
			renderTodos();
			scheduleSaveTodos(sessionId, todos);
			showToast('Restaurado');
			lastDeleted = null;
			hideUndo();
		});
	}



	(async function init() {
		sessionId = getOrCreateSessionId();
		updateSessionLabel();
		updateShareLinkPreview();
		try { const remoteTodos = await loadTodosFromFirebase(sessionId); if (remoteTodos && remoteTodos.length) { todos = remoteTodos.map(t => ({ ...t, createdAt: t.createdAt ?? Date.now() })); } else { const saved = localStorage.getItem('tachado-todos'); if (saved) todos = JSON.parse(saved); } }
		catch { const saved = localStorage.getItem('tachado-todos'); if (saved) todos = JSON.parse(saved); }
		renderTodos();
		cleanupRealtime = setupTodosRealtimeListener(sessionId, (remoteTodos) => { todos = Array.isArray(remoteTodos) ? remoteTodos : remoteTodos || []; renderTodos(); });
	})();

	console.log('Tachado Phase 4/6: Firebase sync enabled, pull-to-refresh removed');
</script>
